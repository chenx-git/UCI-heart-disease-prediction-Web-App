{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import os\
os.chdir('/Users/chenxidong/Desktop/6004 project/')\
import streamlit as st\
import pandas as pd\
import numpy as np\
import matplotlib.pyplot as plt # drawing graphs\
from sklearn.tree import DecisionTreeClassifier # a classification tree\
from sklearn.tree import plot_tree # draw a classification tree\
from sklearn.model_selection import cross_val_score # cross validation\
from sklearn.svm import SVC\
from sklearn.linear_model import LogisticRegression\
from sklearn.ensemble import RandomForestClassifier\
from sklearn.preprocessing import LabelEncoder\
from sklearn.model_selection import train_test_split \
from sklearn.metrics import plot_confusion_matrix, plot_roc_curve, plot_precision_recall_curve\
from sklearn.metrics import precision_score, recall_score \
\
\
def main():\
    st.title('
\f1 \uc0\u55358 \u57024 
\f0  Heart Diease prediction (SDSC6004 Project in 2020)')\
    st.sidebar.title('
\f1 \uc0\u55357 \u56697 \u65039 
\f0  Model Tuning')\
    st.markdown('Four types of model to predict heart diease for kaggle UCI dataset')\
    st.markdown('Data source: https://www.kaggle.com/ronitf/heart-disease-uci')\
    st.sidebar.markdown('Creater: DONG CHENXI')\
    #simpply use the cache last time unlesss the input changed\
    @st.cache(persist=True)\
    def load_data():\
        data=pd.read_csv('/Users/chenxidong/Desktop/6004 project/heart.csv')\
        data.columns = ['age', \
              'sex', \
              'cp', \
              'restbp', \
              'chol', \
              'fbs', \
              'restecg', \
              'thalach', \
              'exang', \
              'oldpeak', \
              'slope', \
              'ca', \
              'thal', \
              'hd']\
        data=pd.get_dummies(data,columns=['cp','restecg','slope','thal'])\
        return data\
    \
    @st.cache(persist=True)\
    #split the data to train and test\
    def split(df):\
        y=df.hd #target column,target vector y\
        x=df.drop(columns=['hd'])\
        #one-hot encoding for catagorical data\
        x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=42)\
        return x_train,x_test,y_train,y_test\
    \
    #plot the evaluation metrics\
    def plot_metrics(metrics_list):\
        if 'Confusion Matrix' in metrics_list:\
            st.subheader('Confusion Matrix')\
            plot_confusion_matrix(model, x_test,y_test,display_labels=class_names)\
            st.pyplot()\
            \
        # ROC curve plot\
        if 'ROC Curve' in metrics_list:\
            st.subheader('ROC Curve')\
            plot_roc_curve(model, x_test,y_test)\
            st.pyplot()\
        \
        # Precision recall curve\
        if 'Precision-Recall Curve' in metrics_list:\
            st.subheader('Precision-Recall Curve')\
            plot_precision_recall_curve(model, x_test,y_test)\
            st.pyplot()\
            \
            \
            \
    df=load_data()\
    x_train,x_test,y_train,y_test=split(df)\
    class_names=['No heart diease','Heart diease']\
    st.sidebar.subheader('Choose Your Model')\
    classifier=st.sidebar.selectbox('Model',('Decision Tree Classifier','SVM','Logistic Regression','Random Forest'))\
    \
    if classifier == 'Decision Tree Classifier':\
        st.sidebar.subheader('Model Parameters')\
        #ccp_alpha\
        ccp_alpha=st.sidebar.number_input('Minimal Cost-Complexity Pruning parameter',0.001,0.080,step=0.010,key='ccp_alpha')\
        max_depth=st.sidebar.number_input('Max depth of tree',5,150,step=10,key='max_depth')\
        \
        metrics=st.sidebar.multiselect('What metrics to plot?',('Confusion Matrix','ROC Curve','Precision-Recall Curve'))\
        \
        if st.sidebar.button('Run',key='classify'):\
            st.subheader('Decision Tree Results')\
            model=DecisionTreeClassifier(random_state=42,ccp_alpha=ccp_alpha)\
            model.fit(x_train,y_train)\
            accuracy=model.score(x_test, y_test)\
            y_pred=model.predict(x_test)\
            st.write('Accuracy: ',accuracy.round(3))\
            st.write('Precision: ',precision_score(y_test, y_pred,labels=class_names).round(3))\
            st.write('Recall: ',recall_score(y_test, y_pred,labels=class_names).round(3))\
            plot_metrics(metrics)\
            #display the optimal tree diagram\
            from PIL import Image\
            image = Image.open('Optimal Tree diagram.png')\
            st.image(image, caption='The Optimal Tree Diagram',use_column_width=True)\
           \
            \
            \
            \
    if classifier == 'SVM':\
        st.sidebar.subheader('Model Parameters')\
        C=st.sidebar.number_input('C (Regularization paramter)',0.010,10.00,step=0.010,key='C')\
        kernel=st.sidebar.radio('kernel',('rbf','linear'),key="kernel")\
        gamma=st.sidebar.radio("Gamma (kernel coefficient)",('scale','auto'),key='gamma')\
        \
        \
        metrics=st.sidebar.multiselect('What metrics to plot?',('Confusion Matrix','ROC Curve','Precision-Recall Curve'))\
        \
        if st.sidebar.button('Run',key='classify'):\
            st.subheader('SVM Results')\
            model=SVC(C=C,kernel=kernel,gamma=gamma)\
            model.fit(x_train,y_train)\
            accuracy=model.score(x_test, y_test)\
            y_pred=model.predict(x_test)\
            st.write('Accuracy: ',accuracy.round(2))\
            st.write('Precision: ',precision_score(y_test, y_pred,labels=class_names).round(2))\
            st.write('Recall: ',recall_score(y_test, y_pred,labels=class_names).round(2))\
            plot_metrics(metrics)\
    \
  \
    if classifier == 'Logistic Regression':\
        st.sidebar.subheader('Model Parameters')\
        C=st.sidebar.number_input('C (Regularization paramter)',0.000,10.00,step=0.010,key='C_LR')\
        max_iter=st.sidebar.slider('Max number of iterations',100,500,key='max_iter')\
        \
        metrics=st.sidebar.multiselect('What metrics to plot?',('Confusion Matrix','ROC Curve','Precision-Recall Curve'))\
        \
        if st.sidebar.button('Run',key='classify'):\
            st.subheader('Logistic Regression Results')\
            model=LogisticRegression(C=C,max_iter=max_iter)\
            model.fit(x_train,y_train)\
            accuracy=model.score(x_test, y_test)\
            y_pred=model.predict(x_test)\
            st.write('Accuracy: ',accuracy.round(2))\
            st.write('Precision: ',precision_score(y_test, y_pred,labels=class_names).round(2))\
            st.write('Recall: ',recall_score(y_test, y_pred,labels=class_names).round(2))\
            plot_metrics(metrics)\
            #plot the coefficients\
            st.text('The coefficients are: ')\
            coef_=pd.DataFrame(model.coef_)\
            coef_.columns=df.drop(columns=['hd']).columns\
            st.dataframe(coef_)\
            st.bar_chart(coef_)\
\
    \
    if classifier == 'Random Forest':\
        st.sidebar.subheader('Model Parameters')\
        #number of trees\
        n_estimators=st.sidebar.number_input('Number of trees in the forest',100,5000,step=10,key='n_estimators')\
        max_depth=st.sidebar.number_input('Max depth of tree',5,20,step=1,key='max_depth')\
        bootstrap=st.sidebar.radio('Bootstrap samples when building trees',('True','False'),key='bootstrap')\
        \
        metrics=st.sidebar.multiselect('What metrics to plot?',('Confusion Matrix','ROC Curve','Precision-Recall Curve'))\
        \
        if st.sidebar.button('Run',key='classify'):\
            st.subheader('Random Forest Results')\
            model=RandomForestClassifier(n_estimators,max_depth=max_depth,bootstrap=bootstrap,n_jobs=-1)\
            model.fit(x_train,y_train)\
            accuracy=model.score(x_test, y_test)\
            y_pred=model.predict(x_test)\
            st.write('Accuracy: ',accuracy.round(2))\
            st.write('Precision: ',precision_score(y_test, y_pred,labels=class_names).round(2))\
            st.write('Recall: ',recall_score(y_test, y_pred,labels=class_names).round(2))\
            plot_metrics(metrics)\
  \
    \
  \
    if st.sidebar.checkbox('Show Attribute Infomation',False):\
        st.subheader('Attribute Info')\
        from PIL import Image\
        Attribute_info= Image.open('Attribute info.png')\
        st.image(Attribute_info,use_column_width=True)\
        \
    if st.sidebar.checkbox('Display UCI dataset',False):\
        st.subheader('UCI heart diease dataset')\
        st.write(df)\
      \
    if st.sidebar.checkbox('Show Data description',False):\
        st.subheader('UCI dataset description')\
        st.write(df.describe())\
        \
\
\
if __name__ == '__main__':\
    main()\
\
st.set_option('deprecation.showPyplotGlobalUse', False)\
 \
\
}